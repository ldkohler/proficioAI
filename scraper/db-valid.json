{
  "problems": {
    "3": {
      "id": 3,
      "solution": "class Solution:\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        mx, start, chars = 0, 0, {}\n        for i in range(len(s)):\n            if s[i] in chars and start <= chars[s[i]]: start = chars[s[i]] + 1\n            else: mx = max(mx, i - start + 1)\n            chars[s[i]] = i\n        return mx",
      "title": "Longest Substring Without Repeating Characters",
      "description": "<p>Given a string <code>s</code>, find the length of the <strong>longest</strong> <span data-keyword=\"substring-nonempty\" class=\" cursor-pointer relative text-dark-blue-s text-sm\"><div class=\"popover-wrapper inline-block\" data-headlessui-state=\"\"><div><div aria-expanded=\"false\" data-headlessui-state=\"\" id=\"headlessui-popover-button-:ro:\"><div><strong>substring</strong></div></div><div style=\"position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(367px, 215px);\"></div></div></div></span> without repeating characters.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"abcabcbb\"\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is \"abc\", with the length of 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"bbbbb\"\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The answer is \"b\", with the length of 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"pwwkew\"\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>\n</ul>\n",
      "topics": ["Hash Table", "String", "Sliding Window"],
      "hints": [],
      "boilerplate": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        ",
      "testCases": [
        { "input": ["abcabcbb"], "expected": [3] },
        { "input": ["bbbbb"], "expected": [1] }
      ]
    },
    "6": {
      "id": 6,
      "solution": "class Solution:\n    def findMedianSortedArrays(self, nums1, nums2):\n        arr = sorted(nums1 + nums2)\n        if len(arr) % 2 == 0: return (arr[len(arr) // 2] + arr[len(arr) // 2 - 1]) / 2\n        else: return arr[len(arr) // 2]",
      "title": "Median of Two Sorted Arrays",
      "description": "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p>\n\n<p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums1 = [1,3], nums2 = [2]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> merged array = [1,2,3] and median is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]\n<strong>Output:</strong> 2.50000\n<strong>Explanation:</strong> merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
      "topics": ["Array", "Binary Search", "Divide and Conquer"],
      "hints": [],
      "boilerplate": "class Solution:\n    def findMedianSortedArrays(self, nums1: list[int], nums2: list\n[int]) -> float:\n        ",
      "testCases": [
        { "input": [[1, 3], [2]], "expected": [2.0] },
        {
          "input": [
            [1, 2],
            [3, 4]
          ],
          "expected": [2.5]
        }
      ]
    },
    "9": {
      "id": 9,
      "solution": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        def check(l, r):\n            while 0 <= l <= r < len(s) and s[l] == s[r]:\n                l -= 1\n                r += 1\n            return s[l + 1:r]\n        pals = [check(i, i) for i in range(len(s))] + [check(i, i + 1) for i in range(len(s) - 1) if s[i] == s[i + 1]]\n        return sorted(pals, key = len)[-1] if pals else ''",
      "title": "Longest Palindromic Substring",
      "description": "<p>Given a string <code>s</code>, return <em>the longest</em> <span data-keyword=\"palindromic-string\" class=\" cursor-pointer relative text-dark-blue-s text-sm\"><div class=\"popover-wrapper inline-block\" data-headlessui-state=\"\"><div><div aria-expanded=\"false\" data-headlessui-state=\"\" id=\"headlessui-popover-button-:ro:\"><div><em>palindromic</em></div></div><div style=\"position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(296px, 183px);\"></div></div></div></span> <span data-keyword=\"substring-nonempty\" class=\" cursor-pointer relative text-dark-blue-s text-sm\"><div class=\"popover-wrapper inline-block\" data-headlessui-state=\"\"><div><div aria-expanded=\"false\" data-headlessui-state=\"\" id=\"headlessui-popover-button-:rq:\"><div><em>substring</em></div></div><div style=\"position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(368px, 183px);\"></div></div></div></span> in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"babad\"\n<strong>Output:</strong> \"bab\"\n<strong>Explanation:</strong> \"aba\" is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"cbbd\"\n<strong>Output:</strong> \"bb\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of only digits and English letters.</li>\n</ul>\n",
      "topics": ["String", "Dynamic Programming"],
      "hints": [
        "How can we reuse a previously computed palindrome to compute a larger palindrome?",
        "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d a palindrome? Similarly is \u201cxabay\u201d a palindrome?",
        "Complexity based hint:\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
      ],
      "boilerplate": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        ",
      "testCases": [
        { "input": ["babad"], "expected": ["bab"] },
        { "input": ["cbbd"], "expected": ["bb"] }
      ]
    },
    "12": {
      "id": 12,
      "solution": "class Solution:\n    def convert(self, s, numRows):\n        if numRows == 1 or numRows >= len(s): return s\n        row, direction, res = 0, -1, [\"\"] * numRows\n        for char in s:\n            res[row] += char\n            if row == 0 or row == numRows - 1: direction *= -1 \n            row += direction\n        return \"\".join(res) ",
      "title": "Zigzag Conversion",
      "description": "<p>The string <code>\"PAYPALISHIRING\"</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n\n<pre>P   A   H   N\nA P L S I I G\nY   I   R\n</pre>\n\n<p>And then read line by line: <code>\"PAHNAPLSIIGYIR\"</code></p>\n\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\n\n<pre>string convert(string s, int numRows);\n</pre>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"PAYPALISHIRING\", numRows = 3\n<strong>Output:</strong> \"PAHNAPLSIIGYIR\"\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"PAYPALISHIRING\", numRows = 4\n<strong>Output:</strong> \"PINALSIGYAHRPI\"\n<strong>Explanation:</strong>\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"A\", numRows = 1\n<strong>Output:</strong> \"A\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), <code>','</code> and <code>'.'</code>.</li>\n\t<li><code>1 &lt;= numRows &lt;= 1000</code></li>\n</ul>\n",
      "topics": ["String"],
      "hints": [],
      "boilerplate": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        ",
      "testCases": {
        "id": 12,
        "testCases": [
          { "input": ["PAYPALISHIRING", 3], "expected": ["PAHNAPLSIIGYIR"] },
          { "input": ["PAYPALISHIRING", 4], "expected": ["PINALSIGYAHRPI"] },
          { "input": ["A", 1], "expected": ["A"] }
        ]
      }
    },
    "15": {
      "id": 15,
      "solution": "class Solution:\n    def reverse(self, x):\n        x = int(str(x)[::-1]) if x >= 0 else int(\"-\" + str(x)[::-1][:-1]); return -2 ** 31 <= x <= 2 ** 31 - 1 and x or 0",
      "title": "Reverse Integer",
      "description": "<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code><em> with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p>\n\n<p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> x = 123\n<strong>Output:</strong> 321\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> x = -123\n<strong>Output:</strong> -321\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> x = 120\n<strong>Output:</strong> 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
      "topics": ["Math"],
      "hints": [],
      "boilerplate": "class Solution:\n    def reverse(self, x: int) -> int:\n        ",
      "testCases": {
        "id": 15,
        "testCases": [
          { "input": [123], "expected": [321] },
          { "input": [-123], "expected": [-321] },
          { "input": [120], "expected": [21] },
          { "input": [1534236469], "expected": [0] }
        ]
      }
    },
    "18": {
      "id": 18,
      "solution": "class Solution:\n    def myAtoi(self, str):\n        r = [int(c) for c in re.findall(r\"^[-+]?\\u005Cd+\", str.lstrip())]\n        return (r and 2 ** 31 - 1 < r[0] and 2 ** 31 - 1) or (r and r[0] < -2 ** 31 and -2 ** 31) or (r and r[0]) or 0",
      "title": "String to Integer (atoi)",
      "description": "<p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer (similar to C/C++'s <code>atoi</code> function).</p>\n\n<p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p>\n\n<ol>\n\t<li>Read in and ignore any leading whitespace.</li>\n\t<li>Check if the next character (if not already at the end of the string) is <code>'-'</code> or <code>'+'</code>. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.</li>\n\t<li>Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.</li>\n\t<li>Convert these digits into an integer (i.e. <code>\"123\" -&gt; 123</code>, <code>\"0032\" -&gt; 32</code>). If no digits were read, then the integer is <code>0</code>. Change the sign as necessary (from step 2).</li>\n\t<li>If the integer is out of the 32-bit signed integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then clamp the integer so that it remains in the range. Specifically, integers less than <code>-2<sup>31</sup></code> should be clamped to <code>-2<sup>31</sup></code>, and integers greater than <code>2<sup>31</sup> - 1</code> should be clamped to <code>2<sup>31</sup> - 1</code>.</li>\n\t<li>Return the integer as the final result.</li>\n</ol>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Only the space character <code>' '</code> is considered a whitespace character.</li>\n\t<li><strong>Do not ignore</strong> any characters other than the leading whitespace or the rest of the string after the digits.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"42\"\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"<u>42</u>\" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 42.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"   -42\"\n<strong>Output:</strong> -42\n<strong>Explanation:</strong>\nStep 1: \"<u>   </u>-42\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   <u>-</u>42\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -<u>42</u>\" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is -42.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"4193 with words\"\n<strong>Output:</strong> 4193\n<strong>Explanation:</strong>\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"<u>4193</u> with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 4193.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>' '</code>, <code>'+'</code>, <code>'-'</code>, and <code>'.'</code>.</li>\n</ul>\n",
      "topics": ["String"],
      "hints": [],
      "boilerplate": "class Solution:\n    def myAtoi(self, s: str) -> int:\n        ",
      "testCases": {
        "id": 18,
        "testCases": [
          { "input": ["42"], "expected": [42] },
          { "input": ["   -42"], "expected": [-42] },
          { "input": ["4193 with words"], "expected": [4193] },
          { "input": ["words and 987"], "expected": [0] },
          { "input": ["-91283472332"], "expected": [-2147483648] }
        ]
      }
    },
    "21": {
      "id": 21,
      "solution": "class Solution:\n    def isPalindrome(self, x):\n        return str(x) == str(x)[::-1]    ",
      "title": "Palindrome Number",
      "description": "<p>Given an integer <code>x</code>, return <code>true</code><em> if </em><code>x</code><em> is a </em><span data-keyword=\"palindrome-integer\" class=\" cursor-pointer relative text-dark-blue-s text-sm\"><div class=\"popover-wrapper inline-block\" data-headlessui-state=\"\"><div><div aria-expanded=\"false\" data-headlessui-state=\"\" id=\"headlessui-popover-button-:ro:\"><div><em><strong>palindrome</strong></em></div></div><div style=\"position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(332px, 183px);\"></div></div></div></span><em>, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> x = 121\n<strong>Output:</strong> true\n<strong>Explanation:</strong> 121 reads as 121 from left to right and from right to left.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> x = -121\n<strong>Output:</strong> false\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> x = 10\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you solve it without converting the integer to a string?",
      "topics": ["Math"],
      "hints": ["Beware of overflow when you reverse the integer."],
      "boilerplate": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        ",
      "testCases": {
        "id": 21,
        "testCases": [
          { "input": [121], "expected": [true] },
          { "input": [-121], "expected": [false] },
          { "input": [10], "expected": [false] }
        ]
      }
    },
    "24": {
      "id": 24,
      "solution": "class Solution:\n    def isMatch(self, s, p):\n        return bool(re.match(r\"%s\" %p, s)) and re.match(r\"%s\" %p, s).group(0) == s ",
      "title": "Regular Expression Matching",
      "description": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>'.'</code> and <code>'*'</code> where:</p>\n\n<ul>\n\t<li><code>'.'</code> Matches any single character.\u200b\u200b\u200b\u200b</li>\n\t<li><code>'*'</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"aa\", p = \"a\"\n<strong>Output:</strong> false\n<strong>Explanation:</strong> \"a\" does not match the entire string \"aa\".\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"aa\", p = \"a*\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"ab\", p = \".*\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \".*\" means \"zero or more (*) of any character (.)\".\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 20</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>'.'</code>, and&nbsp;<code>'*'</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>'*'</code>, there will be a previous valid character to match.</li>\n</ul>\n",
      "topics": ["String", "Dynamic Programming", "Recursion"],
      "hints": [],
      "boilerplate": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        ",
      "testCases": {
        "id": 24,
        "testCases": [
          { "input": ["aa", "a"], "expected": [false] },
          { "input": ["aa", "a*"], "expected": [true] },
          { "input": ["ab", ".*"], "expected": [true] },
          { "input": ["aab", "c*a*b"], "expected": [true] },
          { "input": ["mississippi", "mis*is*p*."], "expected": [false] }
        ]
      }
    },
    "27": {
      "id": 27,
      "solution": "class Solution:\n    def maxArea(self, height):\n        left, right, mx = 0, len(height) - 1, 0\n        while left < right:\n            mx = max(mx, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]: \n                left += 1\n            else: \n                right -= 1\n        return mx",
      "title": "Container With Most Water",
      "description": "<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p>\n\n<p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p>\n\n<p>Return <em>the maximum amount of water a container can store</em>.</p>\n\n<p><strong>Notice</strong> that you may not slant the container.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\">\n<pre><strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]\n<strong>Output:</strong> 49\n<strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> height = [1,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
      "topics": ["Array", "Two Pointers", "Greedy"],
      "hints": [
        "If you simulate the problem, it will be O(n^2) which is not efficient.",
        "Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.",
        "How can you calculate the amount of water at each step?"
      ],
      "boilerplate": "class Solution:\n    def maxArea(self, height: list[int]) -> int:\n        ",
      "testCases": [
        { "input": [[1, 8, 6, 2, 5, 4, 8, 3, 7]], "expected": [49] },
        { "input": [[1, 1]], "expected": [1] },
        { "input": [[1, 2, 1]], "expected": [2] }
      ]
    },
    "30": {
      "id": 30,
      "solution": "class Solution:\n    def intToRoman(self, num):\n        s = \"M\" * (num // 1000)\n        s += \"CM\" if num % 1000 >= 900 else \"D\" *((num % 1000) // 500)\n        s += \"CD\" if num % 500 >= 400 and s[-2:] != \"CM\" else \"C\" * ((num % 500) // 100)  if num % 500 < 400 else \"\"\n        s += \"XC\" if num % 100 >= 90 else \"L\" * ((num % 100) // 50)\n        s += \"XL\" if num % 50 >= 40 and s[-2:] != \"XC\" else \"X\" * ((num % 50) // 10)  if num % 50 < 40 else \"\"\n        s += \"IX\" if num % 10 >= 9 else \"V\" * ((num % 10) // 5)\n        s += \"IV\" if num % 5 >= 4 and s[-2:] != \"IX\" else \"I\" * ((num % 5) // 1) if num % 5 < 4 else \"\"\n        return s",
      "title": "Integer to Roman",
      "description": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre><strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two one's added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given an integer, convert it to a roman numeral.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> num = 3\n<strong>Output:</strong> \"III\"\n<strong>Explanation:</strong> 3 is represented as 3 ones.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> num = 58\n<strong>Output:</strong> \"LVIII\"\n<strong>Explanation:</strong> L = 50, V = 5, III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> num = 1994\n<strong>Output:</strong> \"MCMXCIV\"\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 3999</code></li>\n</ul>\n",
      "topics": ["Hash Table", "Math", "String"],
      "hints": [],
      "boilerplate": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        ",
      "testCases": [
        { "input": [3], "expected": ["III"] },
        { "input": [4], "expected": ["IV"] },
        { "input": [9], "expected": ["IX"] },
        { "input": [58], "expected": ["LVIII"] },
        { "input": [1994], "expected": ["MCMXCIV"] }
      ]
    },
    "36": {
      "id": 36,
      "solution": "class Solution:\n    def longestCommonPrefix(self, s: list[str]) -> str:\n        j = 0\n        while s and all(j < len(s[i]) and j < len(s[i - 1]) and s[i][j] == s[i - 1][j] for i in range(len(s))):\n            j += 1\n        return s[0][:j] if j else ''",
      "title": "Longest Common Prefix",
      "description": "<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\n\n<p>If there is no common prefix, return an empty string <code>\"\"</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> strs = [\"flower\",\"flow\",\"flight\"]\n<strong>Output:</strong> \"fl\"\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> strs = [\"dog\",\"racecar\",\"car\"]\n<strong>Output:</strong> \"\"\n<strong>Explanation:</strong> There is no common prefix among the input strings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>\n\t<li><code>strs[i]</code> consists of only lowercase English letters.</li>\n</ul>\n",
      "topics": ["String", "Trie"],
      "hints": [],
      "boilerplate": "class Solution:\n    def longestCommonPrefix(self, strs: list[str]) -> str:\n        ",
      "testCases": {
        "testCases": [
          { "input": [["flower", "flow", "flight"]], "expected": ["fl"] },
          { "input": [["dog", "racecar", "car"]], "expected": [""] },
          {
            "input": [["interspecies", "interstellar", "interstate"]],
            "expected": ["inters"]
          },
          { "input": [["throne", "throne"]], "expected": ["throne"] }
        ]
      }
    },
    "39": {
      "id": 39,
      "solution": "class Solution:\n    def threeSum(self, nums):\n        res, res_set = [], set()\n        nums.sort()\n        for i in range(len(nums) - 2):\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                sm = nums[i] + nums[l] + nums[r] \n                if sm < 0: l += 1\n                elif sm > 0: r -= 1\n                elif (nums[i], nums[l], nums[r]) not in res_set: \n                    res.append([nums[i], nums[l], nums[r]])\n                    res_set.add((nums[i], nums[l], nums[r])) \n                else: l, r = l + 1, r - 1\n        return res",
      "title": "3Sum",
      "description": "<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n<strong>Explanation:</strong> \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [0,1,1]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The only possible triplet does not sum up to 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> nums = [0,0,0]\n<strong>Output:</strong> [[0,0,0]]\n<strong>Explanation:</strong> The only possible triplet sums up to 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
      "topics": ["Array", "Two Pointers", "Sorting"],
      "hints": [
        "So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!",
        "For the two-sum problem, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y, which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
        "The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
      ],
      "boilerplate": "class Solution:\n    def threeSum(self, nums: list[int]) -> list[list[int]]:\n        ",
      "testCases": {
        "testCases": [
          {
            "input": [[-1, 0, 1, 2, -1, -4]],
            "expected": [
              [-1, -1, 2],
              [-1, 0, 1]
            ]
          },
          { "input": [[0, 1, 1]], "expected": [] },
          { "input": [[0, 0, 0]], "expected": [[0, 0, 0]] }
        ]
      }
    },
    "42": {
      "id": 42,
      "solution": "class Solution:\n    def threeSumClosest(self, nums, target):\n        res = diff = float(\"inf\")\n        nums.sort()\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i - 1]: continue\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                sm = nums[i] + nums[l] + nums[r]\n                if abs(sm - target) < diff: diff, res = abs(sm - target), sm \n                if sm < target: l += 1\n                elif sm > target: r -= 1\n                else: return res\n        return res",
      "title": "3Sum Closest",
      "description": "<p>Given an integer array <code>nums</code> of length <code>n</code> and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>.</p>\n\n<p>Return <em>the sum of the three integers</em>.</p>\n\n<p>You may assume that each input would have exactly one solution.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [-1,2,1,-4], target = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [0,0,0], target = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 500</code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
      "topics": ["Array", "Two Pointers", "Sorting"],
      "hints": [],
      "boilerplate": "class Solution:\n    def threeSumClosest(self, nums: list[int], target: int) -> \nint:\n        ",
      "testCases": [
        { "input": [[-1, 2, 1, -4], 1], "expected": [2] },
        { "input": [[0, 0, 0], 0], "expected": [0] },
        { "input": [[1, 1, 1, 0], -100], "expected": [2] }
      ]
    },
    "45": {
      "id": 45,
      "solution": "class Solution:\n    def letterCombinations(self, digits):\n        dic, res = { '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}, [\"\"]\n        for dig in digits:\n            tmp = []\n            for y in res: \n                for x in dic[dig]: tmp.append(y + x)\n            res = tmp \n        return res if any(res) else []",
      "title": "Letter Combinations of a Phone Number",
      "description": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p>\n\n<p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png\" style=\"width: 300px; height: 243px;\">\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> digits = \"23\"\n<strong>Output:</strong> [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> digits = \"\"\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> digits = \"2\"\n<strong>Output:</strong> [\"a\",\"b\",\"c\"]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n\t<li><code>digits[i]</code> is a digit in the range <code>['2', '9']</code>.</li>\n</ul>\n",
      "topics": ["Hash Table", "String", "Backtracking"],
      "hints": [],
      "boilerplate": "class Solution:\n    def letterCombinations(self, digits: str) -> list[str]:\n        ",
      "testCases": [
        {
          "input": ["23"],
          "expected": ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
        },
        { "input": [""], "expected": [] },
        { "input": ["2"], "expected": ["a", "b", "c"] }
      ]
    }
  }
}
